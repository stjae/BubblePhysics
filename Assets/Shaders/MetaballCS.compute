#pragma kernel CSMain

RWTexture2D<float4> Result;
float Threshold;
float Resolution;
float Radius;
float MaxLifeTime;
float4 Offset;
int Count;

StructuredBuffer<float4> PositionsBuffer;
StructuredBuffer<float> LifeTimesBuffer;
StructuredBuffer<float> IsVisibleFlagsBuffer;

[numthreads(8, 8, 1)] void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 coord = int2(id.x, id.y);
    float2 texCoord = coord - Resolution * 0.5;

    float totalInfl = 0.0;
    float3 totalCol = float3(0, 0, 0);
    float totalAlpha = 0.0;

    float minAlpha = 0.2;
    float maxAlpha = 0.8;

    for (int i = 0; i < Count; i++)
    {
        if (PositionsBuffer[i].w < 1) continue;

        float2 mbPos = (PositionsBuffer[i].xy + Offset.xy) * Resolution;
        float dist2 = pow(texCoord.x - mbPos.x, 2) + pow(texCoord.y - mbPos.y, 2);
        float infl = (Radius * Radius * Resolution) / dist2;
        totalInfl += infl;

        float lifeNorm = saturate(LifeTimesBuffer[i] / MaxLifeTime);
        float alpha = lerp(minAlpha, maxAlpha, lifeNorm);

        if (IsVisibleFlagsBuffer[i] > 0)
            alpha = maxAlpha;

        totalCol += float3(0, 1, 0) * infl;
        totalAlpha += alpha * infl;
    }

    float4 outColor = float4(0, 0, 0, 0);

    if (totalInfl > Threshold)
    {
        float3 col = normalize(totalCol);
        float a = totalAlpha / totalInfl;
        outColor = float4(col, a);
    }

    Result[coord] = outColor;
}
